import { useTranslation } from "react-i18next";
import { motion } from "framer-motion";
import { Play, Image, Music, FileText, Sparkles } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState, useEffect } from "react";

// Typewriter effect component
function TypewriterEffect({ text }: { text: string }) {
  const [displayedText, setDisplayedText] = useState("");

  useEffect(() => {
    let index = 0;
    const timer = setInterval(() => {
      if (index < text.length) {
        setDisplayedText(text.slice(0, index + 1));
        index++;
      } else {
        clearInterval(timer);
      }
    }, 30);

    return () => clearInterval(timer);
  }, [text]);

  return (
    <div>
      {displayedText}
      <motion.span
        animate={{ opacity: [1, 0] }}
        transition={{ duration: 0.8, repeat: Infinity }}
        className="inline-block"
      >
        |
      </motion.span>
    </div>
  );
}

export function AIShowcaseSection() {
  const { t } = useTranslation();
  const [activeDemo, setActiveDemo] = useState<string | null>(null);

  const handleTryDemo = (type: string) => {
    setActiveDemo(type);

    // Simulate demo activation
    setTimeout(() => {
      setActiveDemo(null);
    }, 3000);
  };

  const showcaseItems = [
    {
      type: "image",
      icon: Image,
      titleKey: "showcase.image.title",
      descKey: "showcase.image.desc",
      content: (
        <motion.div
          className="relative rounded-lg overflow-hidden"
          animate={activeDemo === "image" ? { scale: [1, 1.02, 1] } : {}}
          transition={{ duration: 0.5 }}
        >
          <div className="w-72 h-48 relative">
            <img
              src="/assets/ai-generated-image.png"
              alt="AI Generated Futuristic Portrait"
              className="w-72 h-48 rounded-lg shadow-lg object-cover"
            />

            {/* Generation overlay */}
            {activeDemo === "image" && (
              <motion.div
                className="absolute inset-0 bg-black/60 rounded-lg flex items-center justify-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                <div className="text-center text-white">
                  <motion.div
                    className="text-2xl mb-2"
                    animate={{ rotate: [0, 360] }}
                    transition={{ duration: 1, repeat: Infinity }}
                  >
                    üé®
                  </motion.div>
                  <div className="font-semibold">Generating image...</div>
                  <div className="text-sm opacity-80">
                    "Futuristic AI portrait"
                  </div>

                  {/* Progress bar */}
                  <div className="w-32 bg-white/30 rounded-full h-1 mt-3 mx-auto">
                    <motion.div
                      className="bg-blue-400 h-1 rounded-full"
                      animate={{ width: ["0%", "100%"] }}
                      transition={{ duration: 2.5, ease: "easeOut" }}
                    />
                  </div>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>
      ),
    },
    {
      type: "video",
      icon: Play,
      titleKey: "showcase.video.title",
      descKey: "showcase.video.desc",
      content: (
        <div className="w-72 h-48 rounded-lg shadow-lg relative overflow-hidden">
          <video
            className="w-72 h-48 rounded-lg shadow-lg object-cover"
            controls
            poster="/assets/ai-generated-image.png"
            preload="metadata"
          >
            <source src="/assets/ai-generated-video.mp4" type="video/mp4" />
            Twoja przeglƒÖdarka nie obs≈Çuguje elementu video.
          </video>

          {/* Generation overlay - only when demo is active */}
          {activeDemo === "video" && (
            <motion.div
              className="absolute inset-0 bg-black/60 rounded-lg flex items-center justify-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
            >
              <div className="text-center text-white">
                <motion.div
                  className="text-2xl mb-2"
                  animate={{ rotate: [0, 360] }}
                  transition={{ duration: 1, repeat: Infinity }}
                >
                  üé¨
                </motion.div>
                <div className="font-semibold">Processing video...</div>
                <div className="text-sm opacity-80">"AI Generated Content"</div>

                {/* Progress bar */}
                <div className="w-32 bg-white/30 rounded-full h-1 mt-3 mx-auto">
                  <motion.div
                    className="bg-blue-400 h-1 rounded-full"
                    animate={{ width: ["0%", "100%"] }}
                    transition={{ duration: 2.5, ease: "easeOut" }}
                  />
                </div>
              </div>
            </motion.div>
          )}
        </div>
      ),
    },
    {
      type: "music",
      icon: Music,
      titleKey: "showcase.music.title",
      descKey: "showcase.music.desc",
      content: (
        <div className="w-72 h-48 bg-gradient-to-br from-purple-900 via-indigo-800 to-blue-900 rounded-lg shadow-lg flex flex-col items-center justify-center p-4 relative overflow-hidden">
          {/* Audio player */}
          <div className="w-full mb-4">
            <audio
              controls
              className="w-full h-12 bg-black/20 rounded-lg"
              preload="metadata"
            >
              <source src="/assets/ai-generated-music.mp3" type="audio/mpeg" />
              Twoja przeglƒÖdarka nie obs≈Çuguje elementu audio.
            </audio>
          </div>

          {/* Audio waveform visualization */}
          <div className="flex items-end space-x-1 mb-4 h-16">
            {[...Array(24)].map((_, i) => (
              <motion.div
                key={i}
                className="w-1 bg-gradient-to-t from-cyan-400 to-purple-400 rounded-full"
                animate={{
                  height:
                    activeDemo === "music"
                      ? [
                          Math.sin(i * 0.3) * 20 + 25,
                          Math.sin(i * 0.3 + Math.PI / 2) * 25 + 30,
                          Math.sin(i * 0.3 + Math.PI) * 20 + 25,
                          Math.sin(i * 0.3 + (3 * Math.PI) / 2) * 30 + 25,
                        ]
                      : [
                          Math.sin(i * 0.2) * 10 + 15,
                          Math.sin(i * 0.2 + Math.PI / 4) * 15 + 20,
                          Math.sin(i * 0.2 + Math.PI / 2) * 10 + 15,
                        ],
                }}
                transition={{
                  duration: activeDemo === "music" ? 0.4 : 0.8,
                  repeat: Infinity,
                  delay: i * 0.05,
                  ease: "easeInOut",
                }}
              />
            ))}
          </div>

          {/* Floating notes */}
          {activeDemo === "music" &&
            [...Array(4)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute text-white/60 text-lg"
                initial={{ opacity: 0, y: 30 }}
                animate={{
                  opacity: [0, 1, 0],
                  y: [30, -15],
                  x: [Math.random() * 150, Math.random() * 150],
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  delay: i * 0.3,
                }}
              >
                {["‚ô™", "‚ô´", "‚ô¨", "‚ô©"][i]}
              </motion.div>
            ))}

          <div className="text-white/90 text-sm font-medium text-center z-10">
            {activeDemo === "music"
              ? "üéµ Composing..."
              : '‚ô™ "AI Generated Music" ‚ô™'}
            <div className="text-xs text-white/70 mt-1">
              {activeDemo === "music"
                ? "Generating harmonies..."
                : "AI Composed Track"}
            </div>
          </div>
        </div>
      ),
    },
    {
      type: "text",
      icon: FileText,
      titleKey: "showcase.text.title",
      descKey: "showcase.text.desc",
      content: (
        <div className="w-72 h-48 bg-white dark:bg-gray-900 rounded-lg shadow-lg p-4 flex flex-col border border-gray-200 dark:border-gray-700">
          <div className="flex items-center mb-3">
            <FileText className="w-5 h-5 text-blue-600 mr-2" />
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              {activeDemo === "text"
                ? "‚úçÔ∏è AI Writing..."
                : "AI Generated Article"}
            </span>
          </div>
          <div className="flex-1 overflow-hidden">
            <motion.div className="text-xs leading-relaxed text-gray-700 dark:text-gray-300 h-full">
              {activeDemo === "text" ? (
                <TypewriterEffect text="Artificial Intelligence is revolutionizing the way we work and live. From automating complex tasks to providing intelligent insights, AI systems are becoming increasingly sophisticated. Modern language models can understand context, generate creative content, and assist with problem-solving across diverse fields including healthcare, finance, and education..." />
              ) : (
                <div>
                  <p className="mb-2 font-semibold">
                    How AI Transforms Industries
                  </p>
                  <p className="mb-1">
                    Artificial Intelligence is revolutionizing the way we work
                    and live. From automating complex tasks to providing
                    intelligent insights...
                  </p>
                  <p className="mb-1">
                    Modern language models can understand context, generate
                    creative content, and assist with problem-solving...
                  </p>
                  <p className="text-gray-500 dark:text-gray-400 text-xs">
                    ‚ú® Generated by AI in 2.3 seconds
                  </p>
                </div>
              )}
            </motion.div>
          </div>
        </div>
      ),
    },
  ];

  return (
    <section
      id="ai-showcase"
      className="py-20"
      style={{ background: "var(--section-alt-bg)" }}
    >
      <div className="container mx-auto px-4">
        <motion.div
          className="text-center mb-16"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <h2 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
            {t("showcase.title")}
          </h2>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
            {t("showcase.description")}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-7xl mx-auto">
          {showcaseItems.map((item, index) => {
            const Icon = item.icon;
            return (
              <motion.div
                key={item.type}
                className="glass-effect rounded-xl p-6 text-center group hover:scale-105 transition-all duration-300"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <div className="mb-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Icon className="w-6 h-6 text-white" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2 text-gray-800 dark:text-white">
                    {t(item.titleKey)}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-300 text-sm mb-4">
                    {t(item.descKey)}
                  </p>
                </div>

                <div className="mb-4 flex justify-center min-h-[200px] items-center">
                  <div className="relative">{item.content}</div>
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleTryDemo(item.type)}
                  disabled={activeDemo === item.type}
                  className="glass-effect border-blue-400/50 text-gray-800 dark:text-white bg-white/20 dark:bg-transparent hover:bg-white/30 dark:hover:bg-white/10 disabled:opacity-50"
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  {activeDemo === item.type
                    ? t("showcase.processing", "Processing...")
                    : t("showcase.tryButton")}
                </Button>
              </motion.div>
            );
          })}
        </div>
      </div>
    </section>
  );
}


-------------------------------

import { useTranslation } from "react-i18next";
import { motion } from "framer-motion";
import { Play, Image, Music, FileText, Sparkles } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState, useEffect } from "react";

function TypewriterEffect({ text }: { text: string }) {
  const [displayedText, setDisplayedText] = useState("");

  useEffect(() => {
    let index = 0;
    const timer = setInterval(() => {
      if (index < text.length) {
        setDisplayedText(text.slice(0, index + 1));
        index++;
      } else {
        clearInterval(timer);
      }
    }, 30);

    return () => clearInterval(timer);
  }, [text]);

  return (
    <div>
      {displayedText}
      <motion.span
        animate={{ opacity: [1, 0] }}
        transition={{ duration: 0.8, repeat: Infinity }}
        className="inline-block"
      >
        |
      </motion.span>
    </div>
  );
}

export function AIShowcaseSection() {
  const { t } = useTranslation();
  const [activeDemo, setActiveDemo] = useState<string | null>(null);

  const handleTryDemo = (type: string) => {
    setActiveDemo(type);
    setTimeout(() => {
      setActiveDemo(null);
    }, 3000);
  };

  const showcaseItems = [
    {
      type: "image",
      icon: Image,
      titleKey: "showcase.image.title",
      descKey: "showcase.image.desc",
      content: (
        <motion.div
          className="relative rounded-lg overflow-hidden"
          animate={activeDemo === "image" ? { scale: [1, 1.02, 1] } : {}}
          transition={{ duration: 0.5 }}
        >
          <div className="w-72 h-96 relative">
            <img
              src="/assets/ai-generated-image.png"
              alt="AI Generated Futuristic Portrait"
              className="w-72 h-96 rounded-lg shadow-lg object-cover"
            />
            {activeDemo === "image" && (
              <motion.div
                className="absolute inset-0 bg-black/60 rounded-lg flex items-center justify-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                <div className="text-center text-white">
                  <motion.div
                    className="text-2xl mb-2"
                    animate={{ rotate: [0, 360] }}
                    transition={{ duration: 1, repeat: Infinity }}
                  >
                    üé®
                  </motion.div>
                  <div className="font-semibold">Generating image...</div>
                  <div className="text-sm opacity-80">
                    "Futuristic AI portrait"
                  </div>
                  <div className="w-32 bg-white/30 rounded-full h-1 mt-3 mx-auto">
                    <motion.div
                      className="bg-blue-400 h-1 rounded-full"
                      animate={{ width: ["0%", "100%"] }}
                      transition={{ duration: 2.5, ease: "easeOut" }}
                    />
                  </div>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>
      ),
    },
    {
      type: "video",
      icon: Play,
      titleKey: "showcase.video.title",
      descKey: "showcase.video.desc",
      content: (
        <div className="w-72 h-96 rounded-lg shadow-lg relative overflow-hidden">
          <video
            className="w-72 h-96 rounded-lg shadow-lg object-cover"
            controls
            preload="metadata"
          >
            <source src="/assets/ai-generated-video.mp4" type="video/mp4" />
            Twoja przeglƒÖdarka nie obs≈Çuguje elementu video.
          </video>
          {activeDemo === "video" && (
            <motion.div
              className="absolute inset-0 bg-black/60 rounded-lg flex items-center justify-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
            >
              <div className="text-center text-white">
                <motion.div
                  className="text-2xl mb-2"
                  animate={{ rotate: [0, 360] }}
                  transition={{ duration: 1, repeat: Infinity }}
                >
                  üé¨
                </motion.div>
                <div className="font-semibold">Processing video...</div>
                <div className="text-sm opacity-80">"AI Generated Content"</div>
                <div className="w-32 bg-white/30 rounded-full h-1 mt-3 mx-auto">
                  <motion.div
                    className="bg-blue-400 h-1 rounded-full"
                    animate={{ width: ["0%", "100%"] }}
                    transition={{ duration: 2.5, ease: "easeOut" }}
                  />
                </div>
              </div>
            </motion.div>
          )}
        </div>
      ),
    },
    {
      type: "music",
      icon: Music,
      titleKey: "showcase.music.title",
      descKey: "showcase.music.desc",
      content: (
        <div className="w-72 h-96 bg-gradient-to-br from-purple-900 via-indigo-800 to-blue-900 rounded-lg shadow-lg flex flex-col items-center justify-center p-4 relative overflow-hidden">
          <div className="w-full mb-4">
            <audio
              controls
              className="w-full h-12 bg-black/20 rounded-lg"
              preload="metadata"
            >
              <source src="/assets/ai-generated-music.mp3" type="audio/mpeg" />
              Twoja przeglƒÖdarka nie obs≈Çuguje elementu audio.
            </audio>
          </div>
          <div className="flex items-end space-x-1 mb-4 h-16">
            {[...Array(24)].map((_, i) => (
              <motion.div
                key={i}
                className="w-1 bg-gradient-to-t from-cyan-400 to-purple-400 rounded-full"
                animate={{
                  height:
                    activeDemo === "music"
                      ? [
                          Math.sin(i * 0.3) * 20 + 25,
                          Math.sin(i * 0.3 + Math.PI / 2) * 25 + 30,
                          Math.sin(i * 0.3 + Math.PI) * 20 + 25,
                          Math.sin(i * 0.3 + (3 * Math.PI) / 2) * 30 + 25,
                        ]
                      : [
                          Math.sin(i * 0.2) * 10 + 15,
                          Math.sin(i * 0.2 + Math.PI / 4) * 15 + 20,
                          Math.sin(i * 0.2 + Math.PI / 2) * 10 + 15,
                        ],
                }}
                transition={{
                  duration: activeDemo === "music" ? 0.4 : 0.8,
                  repeat: Infinity,
                  delay: i * 0.05,
                  ease: "easeInOut",
                }}
              />
            ))}
          </div>
          {activeDemo === "music" &&
            [...Array(4)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute text-white/60 text-lg"
                initial={{ opacity: 0, y: 30 }}
                animate={{
                  opacity: [0, 1, 0],
                  y: [30, -15],
                  x: [Math.random() * 150, Math.random() * 150],
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  delay: i * 0.3,
                }}
              >
                {["‚ô™", "‚ô´", "‚ô¨", "‚ô©"][i]}
              </motion.div>
            ))}
          <div className="text-white/90 text-sm font-medium text-center z-10">
            {activeDemo === "music"
              ? "üéµ Composing..."
              : '‚ô™ "AI Generated Music" ‚ô™'}
            <div className="text-xs text-white/70 mt-1">
              {activeDemo === "music"
                ? "Generating harmonies..."
                : "AI Composed Track"}
            </div>
          </div>
        </div>
      ),
    },
    {
      type: "text",
      icon: FileText,
      titleKey: "showcase.text.title",
      descKey: "showcase.text.desc",
      content: (
        <div className="w-72 h-96 bg-white dark:bg-gray-900 rounded-lg shadow-lg p-4 flex flex-col border border-gray-200 dark:border-gray-700">
          <div className="flex items-center mb-3">
            <FileText className="w-5 h-5 text-blue-600 mr-2" />
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              {activeDemo === "text"
                ? "‚úçÔ∏è AI Writing..."
                : "AI Generated Article"}
            </span>
          </div>
          <div className="flex-1 overflow-hidden">
            <motion.div className="text-xs leading-relaxed text-gray-700 dark:text-gray-300 h-full">
              {activeDemo === "text" ? (
                <TypewriterEffect text="Artificial Intelligence is revolutionizing the way we work and live. From automating complex tasks to providing intelligent insights, AI systems are becoming increasingly sophisticated. Modern language models can understand context, generate creative content, and assist with problem-solving across diverse fields including healthcare, finance, and education..." />
              ) : (
                <div>
                  <p className="mb-2 font-semibold">
                    How AI Transforms Industries
                  </p>
                  <p className="mb-1">
                    Artificial Intelligence is revolutionizing the way we work
                    and live. From automating complex tasks to providing
                    intelligent insights...
                  </p>
                  <p className="mb-1">
                    Modern language models can understand context, generate
                    creative content, and assist with problem-solving...
                  </p>
                  <p className="text-gray-500 dark:text-gray-400 text-xs">
                    ‚ú® Generated by AI in 2.3 seconds
                  </p>
                </div>
              )}
            </motion.div>
          </div>
        </div>
      ),
    },
  ];

  return (
    <section
      id="ai-showcase"
      className="py-20"
      style={{ background: "var(--section-alt-bg)" }}
    >
      <div className="container mx-auto px-4">
        <motion.div
          className="text-center mb-16"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <h2 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
            {t("showcase.title")}
          </h2>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
            {t("showcase.description")}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-7xl mx-auto">
          {showcaseItems.map((item, index) => {
            const Icon = item.icon;
            return (
              <motion.div
                key={item.type}
                className="glass-effect rounded-xl p-6 text-center group hover:scale-105 transition-all duration-300"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <div className="mb-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Icon className="w-6 h-6 text-white" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2 text-gray-800 dark:text-white">
                    {t(item.titleKey)}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-300 text-sm mb-4">
                    {t(item.descKey)}
                  </p>
                </div>

                <div className="mb-4 flex justify-center min-h-[420px] items-center">
                  <div className="relative">{item.content}</div>
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleTryDemo(item.type)}
                  disabled={activeDemo === item.type}
                  className="glass-effect border-blue-400/50 text-gray-800 dark:text-white bg-white/20 dark:bg-transparent hover:bg-white/30 dark:hover:bg-white/10 disabled:opacity-50"
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  {activeDemo === item.type
                    ? t("showcase.processing", "Processing...")
                    : t("showcase.tryButton")}
                </Button>
              </motion.div>
            );
          })}
        </div>
      </div>
    </section>
  );
}


-----------------------------

{
  "site": {
    "name": "FutureAI",
    "title": "FutureAI - Przysz≈Ço≈õƒá sztucznej inteligencji"
  },
  "nav": {
    "home": "Strona g≈Ç√≥wna",
    "howItWorks": "Jak to dzia≈Ça",
    "showcase": "AI w Akcji",
    "generator": "Generator",
    "myths": "Mity i fakty"
  },
  "hero": {
    "title": "The future is not human-only.",
    "subtitle": "Odkryj nieograniczone mo≈ºliwo≈õci sztucznej inteligencji i kszta≈Çtuj przysz≈Ço≈õƒá technologii ju≈º dzi≈õ",
    "cta": "Rozpocznij eksploracjƒô",
    "learnMore": "Dowiedz siƒô wiƒôcej"
  },
  "howItWorks": {
    "title": "Jak dzia≈Ça sztuczna inteligencja",
    "description": "Poznaj proces, w kt√≥rym AI przekszta≈Çca surowe dane w praktyczne rozwiƒÖzania dla codziennych problem√≥w",
    "step1": {
      "title": "Dane",
      "description": "AI analizuje ogromne ilo≈õci informacji z r√≥≈ºnych ≈∫r√≥de≈Ç - teksty, obrazy, d≈∫wiƒôki i liczby"
    },
    "step2": {
      "title": "Model",
      "description": "Algorytmy uczƒÖ siƒô wzorc√≥w i zale≈ºno≈õci, tworzƒÖc inteligentny system decyzyjny"
    },
    "step3": {
      "title": "Wynik",
      "description": "AI generuje dok≈Çadne predykcje, rekomendacje i rozwiƒÖzania dostosowane do Twoich potrzeb"
    }
  },
  "generator": {
    "title": "Generator Predykcji AI",
    "description": "Interaktywny generator, kt√≥ry pokazuje fascynujƒÖce przewidywania ekspert√≥w na temat rozwoju sztucznej inteligencji w nadchodzƒÖcych latach. Ka≈ºde klikniƒôcie odkrywa nowƒÖ wizjƒô przysz≈Ço≈õci technologii.",
    "placeholder": "Kliknij przycisk, aby odkryƒá fascynujƒÖcƒÖ predykcjƒô o przysz≈Ço≈õci AI...",
    "button": "Generuj predykcjƒô",
    "loading": "Analizujƒô trendy AI..."
  },
  "showcase": {
    "title": "AI w Akcji",
    "description": "Zobacz przyk≈Çady tego, co sztuczna inteligencja mo≈ºe tworzyƒá ju≈º dzi≈õ - od obraz√≥w po muzykƒô i teksty",
    "image": {
      "title": "Generowanie Obraz√≥w",
      "desc": "AI tworzy fotorealistyczne obrazy z opis√≥w tekstowych"
    },
    "video": {
      "title": "Produkcja Wideo",
      "desc": "Automatyczne tworzenie film√≥w i animacji"
    },
    "music": {
      "title": "Kompozycja Muzyki",
      "desc": "AI komponuje oryginalne utwory w ka≈ºdym stylu"
    },
    "text": {
      "title": "Pisanie Tekst√≥w",
      "desc": "Generowanie artyku≈Ç√≥w, raport√≥w i kreatywnych tre≈õci"
    },
    "tryButton": "Wypr√≥buj",
    "processing": "Przetwarzanie..."
  },
  "myths": {
    "title": "Mity i fakty o AI",
    "description": "Odkryj prawdƒô o sztucznej inteligencji i poznaj fakty, kt√≥re mogƒÖ Ciƒô zaskoczyƒá",
    "mythLabel": "MIT",
    "factLabel": "FAKT",
    "myth1": {
      "myth": "AI zastƒÖpi wszystkich ludzi w pracy",
      "fact": "AI bƒôdzie wsp√≥≈Çpracowaƒá z lud≈∫mi, tworzƒÖc nowe rodzaje pracy i zwiƒôkszajƒÖc produktywno≈õƒá w istniejƒÖcych rolach."
    },
    "myth2": {
      "myth": "AI jest bardziej inteligentna ni≈º ludzie",
      "fact": "Obecna AI to wyspecjalizowane narzƒôdzia. Nie posiadajƒÖ ≈õwiadomo≈õci ani og√≥lnej inteligencji jak ludzie."
    },
    "myth3": {
      "myth": "AI mo≈ºe funkcjonowaƒá bez danych",
      "fact": "AI wymaga ogromnych ilo≈õci wysokiej jako≈õci danych do uczenia siƒô i poprawnego funkcjonowania."
    },
    "myth4": {
      "myth": "AI jest nieprzyjazna dla ≈õrodowiska",
      "fact": "Nowoczesne rozwiƒÖzania AI stajƒÖ siƒô coraz bardziej efektywne energetycznie i pomagajƒÖ optymalizowaƒá zu≈ºycie energii."
    },
    "myth5": {
      "myth": "AI jest dostƒôpna tylko dla wielkich korporacji",
      "fact": "Coraz wiƒôcej narzƒôdzi AI staje siƒô dostƒôpnych dla ma≈Çych firm i indywidualnych u≈ºytkownik√≥w."
    },
    "myth6": {
      "myth": "AI zawsze podejmuje idealne decyzje",
      "fact": "AI mo≈ºe pope≈Çniaƒá b≈Çƒôdy i jej decyzje zale≈ºƒÖ od jako≈õci danych oraz algorytm√≥w. Wymaga nadzoru cz≈Çowieka."
    }
  },
  "footer": {
    "description": "Kszta≈Çtujemy przysz≈Ço≈õƒá technologii poprzez innowacyjne rozwiƒÖzania sztucznej inteligencji. Do≈ÇƒÖcz do nas w tej podr√≥≈ºy ku lepszemu jutru.",
    "navigation": "Nawigacja",
    "legal": "Prawne",
    "terms": "Regulamin",
    "privacy": "Polityka prywatno≈õci",
    "cookies": "Polityka cookies",
    "contact": "Kontakt",
    "copyright": "¬© 2024 FutureAI. Wszystkie prawa zastrze≈ºone. Zaprojektowane z üíô dla przysz≈Ço≈õci AI."
  },
  "pages": {
    "terms": {
      "title": "Regulamin",
      "content": "Regulamin korzystania z serwisu FutureAI..."
    },
    "privacy": {
      "title": "Polityka Prywatno≈õci",
      "content": "Polityka prywatno≈õci serwisu FutureAI..."
    }
  }
}


---------------------------

{
  "site": {
    "name": "FutureAI",
    "title": "FutureAI - The Future of Artificial Intelligence"
  },
  "nav": {
    "home": "Home",
    "howItWorks": "How It Works",
    "showcase": "AI in Action",
    "generator": "Generator",
    "myths": "Myths & Facts"
  },
  "hero": {
    "title": "The future is not human-only.",
    "subtitle": "Discover unlimited possibilities of artificial intelligence and shape the future of technology today",
    "cta": "Start Exploration",
    "learnMore": "Learn More"
  },
  "howItWorks": {
    "title": "How Artificial Intelligence Works",
    "description": "Discover the process by which AI transforms raw data into practical solutions for everyday problems",
    "step1": {
      "title": "Data",
      "description": "AI analyzes vast amounts of information from various sources - text, images, sounds, and numbers"
    },
    "step2": {
      "title": "Model",
      "description": "Algorithms learn patterns and relationships, creating an intelligent decision-making system"
    },
    "step3": {
      "title": "Result",
      "description": "AI generates accurate predictions, recommendations, and solutions tailored to your needs"
    }
  },
  "generator": {
    "title": "AI Prediction Generator",
    "description": "Interactive generator that showcases fascinating expert predictions about artificial intelligence development in the coming years. Each click reveals a new vision of technology's future.",
    "placeholder": "Click the button to discover a fascinating prediction about AI's future...",
    "button": "Generate Prediction",
    "loading": "Analyzing AI trends..."
  },
  "showcase": {
    "title": "AI in Action",
    "description": "See examples of what artificial intelligence can create today - from images to music and text",
    "image": {
      "title": "Image Generation",
      "desc": "AI creates photorealistic images from text descriptions"
    },
    "video": {
      "title": "Video Production",
      "desc": "Automatic creation of films and animations"
    },
    "music": {
      "title": "Music Composition",
      "desc": "AI composes original tracks in any style"
    },
    "text": {
      "title": "Text Writing",
      "desc": "Generating articles, reports and creative content"
    },
    "tryButton": "Try Now",
    "processing": "Processing..."
  },
  "myths": {
    "title": "AI Myths & Facts",
    "description": "Discover the truth about artificial intelligence and learn facts that might surprise you",
    "mythLabel": "MYTH",
    "factLabel": "FACT",
    "myth1": {
      "myth": "AI will replace all humans at work",
      "fact": "AI will collaborate with humans, creating new types of jobs and increasing productivity in existing roles."
    },
    "myth2": {
      "myth": "AI is more intelligent than humans",
      "fact": "Current AI consists of specialized tools. They don't possess consciousness or general intelligence like humans."
    },
    "myth3": {
      "myth": "AI can function without data",
      "fact": "AI requires enormous amounts of high-quality data to learn and function properly."
    },
    "myth4": {
      "myth": "AI is environmentally unfriendly",
      "fact": "Modern AI solutions are becoming increasingly energy-efficient and help optimize energy consumption."
    },
    "myth5": {
      "myth": "AI is only available to large corporations",
      "fact": "More and more AI tools are becoming available to small businesses and individual users."
    },
    "myth6": {
      "myth": "AI always makes perfect decisions",
      "fact": "AI can make mistakes and its decisions depend on data quality and algorithms. It requires human oversight."
    }
  },
  "footer": {
    "description": "We shape the future of technology through innovative artificial intelligence solutions. Join us on this journey towards a better tomorrow.",
    "navigation": "Navigation",
    "legal": "Legal",
    "terms": "Terms of Service",
    "privacy": "Privacy Policy",
    "cookies": "Cookie Policy",
    "contact": "Contact",
    "copyright": "¬© 2024 FutureAI. All rights reserved. Designed with üíô for the future of AI."
  },
  "pages": {
    "terms": {
      "title": "Terms of Service",
      "content": "Terms of service for FutureAI platform..."
    },
    "privacy": {
      "title": "Privacy Policy",
      "content": "Privacy policy for FutureAI platform..."
    }
  }
}


---------------------------

import { Switch, Route } from "wouter";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { ThemeProvider } from "next-themes";
import { Helmet, HelmetProvider } from "react-helmet-async";
import { useTranslation } from "react-i18next";

import { queryClient } from "./lib/queryClient";
import { useScrollToTop } from "./hooks/useScrollToTop";

import Home from "@/pages/Home";
import Regulamin from "@/pages/Regulamin";
import PolitykaPrywatnosci from "@/pages/PolitykaPrywatnosci";
import NotFound from "@/pages/not-found";

function Router() {
  useScrollToTop();
  
  return (
    <Switch>
      <Route path="/" component={Home} />
      <Route path="/regulamin" component={Regulamin} />
      <Route path="/polityka-prywatnosci" component={PolitykaPrywatnosci} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  const { t } = useTranslation();

  return (
    <HelmetProvider>
      <QueryClientProvider client={queryClient}>
        <ThemeProvider attribute="class" defaultTheme="dark" enableSystem>
          <TooltipProvider>
            <Helmet>
              <title>{t('site.title')}</title>
              <meta name="description" content={t('hero.subtitle')} />
            </Helmet>
            <Toaster />
            <Router />
          </TooltipProvider>
        </ThemeProvider>
      </QueryClientProvider>
    </HelmetProvider>
  );
}

export default App;


----------------------------

import { Link } from "wouter";
import { useTranslation } from "react-i18next";
import { Zap, Twitter, Linkedin, Github } from "lucide-react";

export function Footer() {
  const { t } = useTranslation();

  return (
    <footer className="bg-gray-900 dark:bg-gray-950 border-t border-gray-800 py-12">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Logo & Description */}
          <div className="col-span-1 md:col-span-2">
            <div className="flex items-center space-x-2 mb-4">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Zap className="text-white h-5 w-5" />
              </div>
              <span className="text-xl font-bold gradient-text">{t('site.name')}</span>
            </div>
            <p className="text-gray-400 mb-6 max-w-md">
              {t('footer.description')}
            </p>
            <div className="flex items-center space-x-4">
              <a 
                href="#" 
                className="text-gray-400 hover:text-blue-400 transition-colors"
                aria-label="Twitter"
              >
                <Twitter className="w-6 h-6" />
              </a>
              <a 
                href="#" 
                className="text-gray-400 hover:text-blue-400 transition-colors"
                aria-label="LinkedIn"
              >
                <Linkedin className="w-6 h-6" />
              </a>
              <a 
                href="#" 
                className="text-gray-400 hover:text-blue-400 transition-colors"
                aria-label="GitHub"
              >
                <Github className="w-6 h-6" />
              </a>
            </div>
          </div>

          {/* Navigation */}
          <div>
            <h3 className="text-lg font-semibold mb-4 text-white">
              {t('footer.navigation')}
            </h3>
            <ul className="space-y-2 text-gray-400">
              <li>
                <a href="#home" className="hover:text-blue-400 transition-colors">
                  {t('nav.home')}
                </a>
              </li>
              <li>
                <a href="#how-it-works" className="hover:text-blue-400 transition-colors">
                  {t('nav.howItWorks')}
                </a>
              </li>
              <li>
                <a href="#generator" className="hover:text-blue-400 transition-colors">
                  {t('nav.generator')}
                </a>
              </li>
              <li>
                <a href="#myths" className="hover:text-blue-400 transition-colors">
                  {t('nav.myths')}
                </a>
              </li>
            </ul>
          </div>

          {/* Legal */}
          <div>
            <h3 className="text-lg font-semibold mb-4 text-white">
              {t('footer.legal')}
            </h3>
            <ul className="space-y-2 text-gray-400">
              <li>
                <Link href="/regulamin" className="hover:text-blue-400 transition-colors">
                  {t('footer.terms')}
                </Link>
              </li>
              <li>
                <Link href="/polityka-prywatnosci" className="hover:text-blue-400 transition-colors">
                  {t('footer.privacy')}
                </Link>
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t border-gray-800 mt-8 pt-8 text-center text-gray-400">
          <p>{t('footer.copyright')}</p>
        </div>
      </div>
    </footer>
  );
}


-------------------------

import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Link } from "wouter";
import { ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Navbar } from "@/components/Navbar";
import { Footer } from "@/components/Footer";

export default function PolitykaPrywatnosci() {
  const { t } = useTranslation();

  return (
    <>
      <Helmet>
        <title>{t('pages.privacy.title')} - {t('site.name')}</title>
        <meta name="description" content={`${t('pages.privacy.title')} - ${t('site.name')}`} />
      </Helmet>
      
      <div className="min-h-screen bg-background text-foreground">
        <Navbar />
        <main className="pt-24 pb-16">
          <div className="container mx-auto px-4 max-w-4xl">
            <div className="mb-8">
              <Link href="/">
                <Button variant="ghost" className="mb-4">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Powr√≥t do strony g≈Ç√≥wnej
                </Button>
              </Link>
              
              <h1 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
                {t('pages.privacy.title')}
              </h1>
            </div>

            <div className="prose prose-lg dark:prose-invert max-w-none">
              <div className="glass-effect rounded-2xl p-8">
                <h2>1. Informacje og√≥lne</h2>
                <p>
                  Niniejsza polityka prywatno≈õci okre≈õla zasady przetwarzania i ochrony 
                  danych osobowych u≈ºytkownik√≥w serwisu FutureAI.
                </p>

                <h2>2. Administrator danych</h2>
                <p>
                  Administratorem danych osobowych jest FutureAI, odpowiedzialny za 
                  bezpieczne przetwarzanie powierzonych danych.
                </p>

                <h2>3. Zakres zbieranych danych</h2>
                <p>
                  Serwis mo≈ºe zbieraƒá nastƒôpujƒÖce dane:
                </p>
                <ul>
                  <li>Dane techniczne (adres IP, typ przeglƒÖdarki, system operacyjny)</li>
                  <li>Dane o aktywno≈õci w serwisie (odwiedzone strony, czas wizyty)</li>
                  <li>Dane z plik√≥w cookies (preferencje u≈ºytkownika)</li>
                </ul>

                <h2>4. Cel przetwarzania danych</h2>
                <p>
                  Dane sƒÖ przetwarzane w celu:
                </p>
                <ul>
                  <li>Zapewnienia prawid≈Çowego funkcjonowania serwisu</li>
                  <li>Analizy ruchu i optymalizacji witryny</li>
                  <li>Personalizacji do≈õwiadcze≈Ñ u≈ºytkownika</li>
                </ul>

                <h2>5. Podstawa prawna</h2>
                <p>
                  PodstawƒÖ przetwarzania danych jest uzasadniony interes administratora 
                  (art. 6 ust. 1 lit. f RODO) oraz zgoda u≈ºytkownika (art. 6 ust. 1 lit. a RODO).
                </p>

                <h2>6. Czas przechowywania danych</h2>
                <p>
                  Dane sƒÖ przechowywane przez czas niezbƒôdny do realizacji cel√≥w, 
                  dla kt√≥rych zosta≈Çy zebrane, nie d≈Çu≈ºej ni≈º przez 2 lata.
                </p>

                <h2>7. Prawa u≈ºytkownik√≥w</h2>
                <p>
                  U≈ºytkownik ma prawo do:
                </p>
                <ul>
                  <li>Dostƒôpu do swoich danych osobowych</li>
                  <li>Sprostowania nieprawid≈Çowych danych</li>
                  <li>Usuniƒôcia danych (prawo do bycia zapomnianym)</li>
                  <li>Ograniczenia przetwarzania</li>
                  <li>Przenoszenia danych</li>
                  <li>Wniesienia sprzeciwu wobec przetwarzania</li>
                </ul>

                <h2>8. Cookies</h2>
                <p>
                  Serwis wykorzystuje pliki cookies w celu zapewnienia prawid≈Çowego 
                  funkcjonowania oraz analizy ruchu. U≈ºytkownik mo≈ºe zarzƒÖdzaƒá 
                  ustawieniami cookies w swojej przeglƒÖdarce.
                </p>

                <h2>9. Bezpiecze≈Ñstwo</h2>
                <p>
                  Stosujemy odpowiednie ≈õrodki techniczne i organizacyjne w celu 
                  ochrony danych osobowych przed nieuprawnionym dostƒôpem, utratƒÖ czy zniszczeniem.
                </p>

                <h2>10. Kontakt</h2>
                <p>
                  W sprawach dotyczƒÖcych ochrony danych osobowych mo≈ºna skontaktowaƒá 
                  siƒô z nami poprzez formularz kontaktowy dostƒôpny w serwisie.
                </p>

                <p className="text-sm text-gray-500 mt-8">
                  Ostatnia aktualizacja: {new Date().toLocaleDateString('pl-PL')}
                </p>
              </div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    </>
  );
}


---------------------------

import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Link } from "wouter";
import { ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Navbar } from "@/components/Navbar";
import { Footer } from "@/components/Footer";

export default function Regulamin() {
  const { t } = useTranslation();

  return (
    <>
      <Helmet>
        <title>{t('pages.terms.title')} - {t('site.name')}</title>
        <meta name="description" content={`${t('pages.terms.title')} - ${t('site.name')}`} />
      </Helmet>
      
      <div className="min-h-screen bg-background text-foreground">
        <Navbar />
        <main className="pt-24 pb-16">
          <div className="container mx-auto px-4 max-w-4xl">
            <div className="mb-8">
              <Link href="/">
                <Button variant="ghost" className="mb-4">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Powr√≥t do strony g≈Ç√≥wnej
                </Button>
              </Link>
              
              <h1 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
                {t('pages.terms.title')}
              </h1>
            </div>

            <div className="prose prose-lg dark:prose-invert max-w-none">
              <div className="glass-effect rounded-2xl p-8">
                <h2>1. Postanowienia og√≥lne</h2>
                <p>
                  Niniejszy regulamin okre≈õla zasady korzystania z serwisu FutureAI, 
                  dostƒôpnego pod adresem internetowym oraz zwiƒÖzanych z nim us≈Çug.
                </p>

                <h2>2. Definicje</h2>
                <p>
                  <strong>Serwis</strong> - witryna internetowa FutureAI oraz wszystkie 
                  zwiƒÖzane z niƒÖ funkcjonalno≈õci i us≈Çugi.
                </p>
                <p>
                  <strong>U≈ºytkownik</strong> - osoba fizyczna korzystajƒÖca z Serwisu.
                </p>

                <h2>3. Zasady korzystania</h2>
                <p>
                  Korzystanie z Serwisu jest bezp≈Çatne i nie wymaga rejestracji. 
                  U≈ºytkownik zobowiƒÖzuje siƒô do korzystania z Serwisu zgodnie z jego 
                  przeznaczeniem i obowiƒÖzujƒÖcymi przepisami prawa.
                </p>

                <h2>4. W≈Çasno≈õƒá intelektualna</h2>
                <p>
                  Wszystkie tre≈õci publikowane w Serwisie, w tym teksty, grafiki, 
                  logotypy, stanowiƒÖ w≈Çasno≈õƒá intelektualnƒÖ FutureAI i sƒÖ chronione 
                  przepisami prawa autorskiego.
                </p>

                <h2>5. Wy≈ÇƒÖczenie odpowiedzialno≈õci</h2>
                <p>
                  Serwis ma charakter edukacyjny i informacyjny. Tre≈õci prezentowane 
                  w Serwisie nie stanowiƒÖ porady prawnej, finansowej ani inwestycyjnej.
                </p>

                <h2>6. Postanowienia ko≈Ñcowe</h2>
                <p>
                  Regulamin mo≈ºe byƒá zmieniany. O wszelkich zmianach U≈ºytkownicy bƒôdƒÖ 
                  informowani poprzez publikacjƒô nowej wersji regulaminu w Serwisie.
                </p>

                <p className="text-sm text-gray-500 mt-8">
                  Ostatnia aktualizacja: {new Date().toLocaleDateString('pl-PL')}
                </p>
              </div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    </>
  );
}


----------------------------

{
  "site": {
    "name": "FutureAI",
    "title": "FutureAI - The Future of Artificial Intelligence"
  },
  "nav": {
    "home": "Home",
    "howItWorks": "How It Works",
    "showcase": "AI in Action",
    "generator": "Generator",
    "myths": "Myths & Facts"
  },
  "hero": {
    "title": "The future is not human-only.",
    "subtitle": "Discover unlimited possibilities of artificial intelligence and shape the future of technology today",
    "cta": "Start Exploration",
    "learnMore": "Learn More"
  },
  "howItWorks": {
    "title": "How Artificial Intelligence Works",
    "description": "Discover the process by which AI transforms raw data into practical solutions for everyday problems",
    "step1": {
      "title": "Data",
      "description": "AI analyzes vast amounts of information from various sources - text, images, sounds, and numbers"
    },
    "step2": {
      "title": "Model",
      "description": "Algorithms learn patterns and relationships, creating an intelligent decision-making system"
    },
    "step3": {
      "title": "Result",
      "description": "AI generates accurate predictions, recommendations, and solutions tailored to your needs"
    }
  },
  "generator": {
    "title": "AI Prediction Generator",
    "description": "Interactive generator that showcases fascinating expert predictions about artificial intelligence development in the coming years. Each click reveals a new vision of technology's future.",
    "placeholder": "Click the button to discover a fascinating prediction about AI's future...",
    "button": "Generate Prediction",
    "loading": "Analyzing AI trends..."
  },
  "showcase": {
    "title": "AI in Action",
    "description": "See examples of what artificial intelligence can create today - from images to music and text",
    "image": {
      "title": "Image Generation",
      "desc": "AI creates photorealistic images from text descriptions",
      "processingText": "Generating image...",
      "processingQuote": "\"Futuristic AI portrait\""
    },
    "video": {
      "title": "Video Production",
      "desc": "Automatic creation of films and animations",
      "processingText": "Processing video...",
      "processingQuote": "\"AI Generated Content\""
    },
    "music": {
      "title": "Music Composition",
      "desc": "AI composes original tracks in any style",
      "processingLabel": "üéµ Composing...",
      "processingSublabel": "Generating harmonies...",
      "staticLabel": "‚ô™ \"AI Generated Music\" ‚ô™",
      "staticSublabel": "AI Composed Track"
    },
    "text": {
      "title": "Text Writing",
      "desc": "Generating articles, reports and creative content",
      "processingLabel": "‚úçÔ∏è AI Writing...",
      "staticLabel": "AI Generated Article",
      "staticTitle": "How AI Transforms Industries",
      "staticContent": "Artificial Intelligence is revolutionizing the way we work and live. From automating complex tasks to providing intelligent insights...",
      "staticGeneratedIn": "‚ú® Generated by AI in 2.3 seconds",
      "typewriterContent": "Artificial Intelligence is revolutionizing the way we work and live. From automating complex tasks to providing intelligent insights, AI systems are becoming increasingly sophisticated. Modern language models can understand context, generate creative content, and assist with problem-solving across diverse fields including healthcare, finance, and education..."
    },
    "tryButton": "Try Now",
    "processing": "Processing..."
  },
  "myths": {
    "title": "AI Myths & Facts",
    "description": "Discover the truth about artificial intelligence and learn facts that might surprise you",
    "mythLabel": "MYTH",
    "factLabel": "FACT",
    "myth1": {
      "myth": "AI will replace all humans at work",
      "fact": "AI will collaborate with humans, creating new types of jobs and increasing productivity in existing roles."
    },
    "myth2": {
      "myth": "AI is more intelligent than humans",
      "fact": "Current AI consists of specialized tools. They don't possess consciousness or general intelligence like humans."
    },
    "myth3": {
      "myth": "AI can function without data",
      "fact": "AI requires enormous amounts of high-quality data to learn and function properly."
    },
    "myth4": {
      "myth": "AI is environmentally unfriendly",
      "fact": "Modern AI solutions are becoming increasingly energy-efficient and help optimize energy consumption."
    },
    "myth5": {
      "myth": "AI is only available to large corporations",
      "fact": "More and more AI tools are becoming available to small businesses and individual users."
    },
    "myth6": {
      "myth": "AI always makes perfect decisions",
      "fact": "AI can make mistakes and its decisions depend on data quality and algorithms. It requires human oversight."
    }
  },
  "footer": {
    "description": "We shape the future of technology through innovative artificial intelligence solutions. Join us on this journey towards a better tomorrow.",
    "navigation": "Navigation",
    "legal": "Legal",
    "terms": "Terms of Service",
    "privacy": "Privacy Policy",
    "cookies": "Cookie Policy",
    "contact": "Contact",
    "copyright": "¬© 2024 FutureAI. All rights reserved. Designed with üíô for the future of AI."
  },
  "pages": {
    "terms": {
      "title": "Terms of Service",
      "content": "Terms of service for FutureAI platform..."
    },
    "privacy": {
      "title": "Privacy Policy",
      "content": "Privacy policy for FutureAI platform..."
    }
  }
}


--------------------------

@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Space+Grotesk:wght@400;500;600;700&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: hsl(0, 0%, 100%);
  --foreground: hsl(240, 10%, 3.9%);
  --muted: hsl(240, 4.8%, 95.9%);
  --muted-foreground: hsl(240, 3.7%, 45.9%);
  --popover: hsl(0, 0%, 100%);
  --popover-foreground: hsl(240, 10%, 3.9%);
  --card: hsl(0, 0%, 100%);
  --card-foreground: hsl(240, 10%, 3.9%);
  --border: hsl(240, 5.9%, 90%);
  --input: hsl(240, 5.9%, 90%);
  --primary: hsl(221, 83%, 53%);
  --primary-foreground: hsl(210, 40%, 98%);
  --secondary: hsl(210, 40%, 96%);
  --secondary-foreground: hsl(222, 84%, 4.9%);
  --accent: hsl(210, 40%, 96%);
  --accent-foreground: hsl(222, 84%, 4.9%);
  --destructive: hsl(0, 84%, 60%);
  --destructive-foreground: hsl(210, 40%, 98%);
  --ring: hsl(221, 83%, 53%);
  --radius: 0.75rem;

  /* Custom AI theme colors - Light */
  --ai-primary: hsl(221, 83%, 53%);
  --ai-secondary: hsl(262, 83%, 58%);
  --ai-accent: hsl(142, 71%, 45%);
  --glass-bg: hsla(255, 255%, 255%, 0.85);
  --glass-border: hsla(221, 83%, 53%, 0.3);
  --section-bg: hsl(240, 4.8%, 97%);
  --section-alt-bg: hsl(240, 4.8%, 95%);
}

.dark {
  --background: hsl(240, 10%, 3.9%);
  --foreground: hsl(0, 0%, 98%);
  --muted: hsl(240, 3.7%, 15.9%);
  --muted-foreground: hsl(240, 5%, 64.9%);
  --popover: hsl(240, 10%, 3.9%);
  --popover-foreground: hsl(0, 0%, 98%);
  --card: hsl(240, 10%, 3.9%);
  --card-foreground: hsl(0, 0%, 98%);
  --border: hsl(240, 3.7%, 15.9%);
  --input: hsl(240, 3.7%, 15.9%);
  --primary: hsl(221, 83%, 53%);
  --primary-foreground: hsl(210, 40%, 98%);
  --secondary: hsl(240, 3.7%, 15.9%);
  --secondary-foreground: hsl(0, 0%, 98%);
  --accent: hsl(240, 3.7%, 15.9%);
  --accent-foreground: hsl(0, 0%, 98%);
  --destructive: hsl(0, 62%, 30%);
  --destructive-foreground: hsl(0, 0%, 98%);
  --ring: hsl(240, 4.9%, 83.9%);

  /* Dark theme custom colors */
  --ai-primary: hsl(221, 83%, 53%);
  --ai-secondary: hsl(262, 83%, 58%);
  --ai-accent: hsl(142, 71%, 45%);
  --glass-bg: hsla(240, 15%, 8%, 0.85);
  --glass-border: hsla(221, 83%, 53%, 0.3);
  --section-bg: linear-gradient(
    135deg,
    hsl(240, 15%, 8%) 0%,
    hsl(250, 20%, 12%) 100%
  );
  --section-alt-bg: linear-gradient(
    135deg,
    hsl(260, 25%, 15%) 0%,
    hsl(270, 20%, 10%) 100%
  );
}

@layer base {
  * {
    @apply border-border;
  }
  html {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    overflow-x: hidden;
  }
  body {
    @apply bg-background text-foreground font-sans antialiased;
    font-family: "Inter", sans-serif;
    width: 100%;
    overflow-x: hidden;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Space Grotesk", sans-serif;
  }
}

@layer components {
  .glass-effect {
    background: var(--glass-bg);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid var(--glass-border);
  }

  .gradient-text {
    background: linear-gradient(135deg, var(--ai-primary), var(--ai-secondary));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .glow-effect {
    box-shadow: 0 0 20px hsla(221, 83%, 53%, 0.3);
  }

  .typewriter {
    overflow: hidden;
    border-right: 2px solid hsl(var(--ai-primary));
    white-space: nowrap;
    animation: typing 4s steps(40) 1s 1 normal both, blink 1s infinite;
  }

  .parallax-bg {
    background: linear-gradient(
      135deg,
      hsl(210, 40%, 96%) 0%,
      hsl(220, 40%, 92%) 50%,
      hsl(230, 40%, 88%) 100%
    );
    background-attachment: fixed;
  }

  .dark .parallax-bg {
    background: linear-gradient(
      135deg,
      hsl(240, 15%, 8%) 0%,
      hsl(250, 20%, 12%) 25%,
      hsl(260, 25%, 15%) 50%,
      hsl(270, 20%, 10%) 75%,
      hsl(240, 15%, 6%) 100%
    );
    background-attachment: fixed;
  }
}

@layer utilities {
  .animate-float {
    animation: float 3s ease-in-out infinite;
  }

  .animate-glow {
    animation: glow 2s ease-in-out infinite alternate;
  }
}

@keyframes typing {
  from {
    width: 0;
  }
  to {
    width: 100%;
  }
}

@keyframes blink {
  0%,
  50% {
    border-color: hsl(var(--ai-primary));
  }
  51%,
  100% {
    border-color: transparent;
  }
}

@keyframes float {
  0%,
  100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes glow {
  0% {
    box-shadow: 0 0 20px hsla(221, 83%, 53%, 0.3);
  }
  100% {
    box-shadow: 0 0 40px hsla(221, 83%, 53%, 0.6);
  }
}


---------------------------

import { useTranslation } from "react-i18next";
import { XCircle, CheckCircle } from "lucide-react";
import { motion } from "framer-motion";

interface MythBusterCardProps {
  mythKey: string;
  index: number;
}

export function MythBusterCard({ mythKey, index }: MythBusterCardProps) {
  const { t } = useTranslation();

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      viewport={{ once: true }}
      className="glass-effect rounded-xl p-6 hover:bg-white/10 dark:hover:bg-white/10 transition-colors group"
    >
      {/* Myth Section */}
      <div className="mb-4">
        <div className="flex items-center mb-3">
          <div className="w-8 h-8 bg-red-500/20 rounded-lg flex items-center justify-center mr-3">
            <XCircle className="w-5 h-5 text-red-400" />
          </div>
          <span className="inline-block px-3 py-1 bg-red-500/20 text-red-400 rounded-full text-sm font-semibold">
            {t('myths.mythLabel')}
          </span>
        </div>
        <h3 className="text-xl font-semibold mb-4 text-white group-hover:text-blue-400 transition-colors">
          {t(`myths.${mythKey}.myth`)}
        </h3>
      </div>

      {/* Fact Section */}
      <div className="border-t border-gray-700 pt-4">
        <div className="flex items-center mb-3">
          <div className="w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center mr-3">
            <CheckCircle className="w-5 h-5 text-green-400" />
          </div>
          <span className="inline-block px-3 py-1 bg-green-500/20 text-green-400 rounded-full text-sm font-semibold">
            {t('myths.factLabel')}
          </span>
        </div>
        <p className="text-gray-300">
          {t(`myths.${mythKey}.fact`)}
        </p>
      </div>
    </motion.div>
  );
}


---------------------------

import { Link } from "wouter";
import { useTranslation } from "react-i18next";
import i18n from "@/i18n";
import { routes } from "@/routes";
import { Zap, Twitter, Linkedin, Github } from "lucide-react";

export function Footer() {
  const { t } = useTranslation();
  const currentLang = i18n.language as "pl" | "en";

  const getPath = (key: string) => {
    const route = routes.find((r) => r.key === key);
    return route ? route.paths[currentLang] : "/";
  };

  return (
    <footer className="bg-gray-900 dark:bg-gray-950 border-t border-gray-800 py-12">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div className="col-span-1 md:col-span-2">
            <div className="flex items-center space-x-2 mb-4">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Zap className="text-white h-5 w-5" />
              </div>
              <span className="text-xl font-bold gradient-text">
                {t("site.name")}
              </span>
            </div>
            <p className="text-gray-400 mb-6 max-w-md">
              {t("footer.description")}
            </p>
            <div className="flex items-center space-x-4">
              <a
                href="#"
                className="text-gray-400 hover:text-blue-400 transition-colors"
                aria-label="Twitter"
              >
                <Twitter className="w-6 h-6" />
              </a>
              <a
                href="#"
                className="text-gray-400 hover:text-blue-400 transition-colors"
                aria-label="LinkedIn"
              >
                <Linkedin className="w-6 h-6" />
              </a>
              <a
                href="#"
                className="text-gray-400 hover:text-blue-400 transition-colors"
                aria-label="GitHub"
              >
                <Github className="w-6 h-6" />
              </a>
            </div>
          </div>
          <div>
            <h3 className="text-lg font-semibold mb-4 text-white">
              {t("footer.navigation")}
            </h3>
            <ul className="space-y-2 text-gray-400">
              <li>
                <a
                  href="#home"
                  className="hover:text-blue-400 transition-colors"
                >
                  {t("nav.home")}
                </a>
              </li>
              <li>
                <a
                  href="#how-it-works"
                  className="hover:text-blue-400 transition-colors"
                >
                  {t("nav.howItWorks")}
                </a>
              </li>
              <li>
                <a
                  href="#generator"
                  className="hover:text-blue-400 transition-colors"
                >
                  {t("nav.generator")}
                </a>
              </li>
              <li>
                <a
                  href="#myths"
                  className="hover:text-blue-400 transition-colors"
                >
                  {t("nav.myths")}
                </a>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="text-lg font-semibold mb-4 text-white">
              {t("footer.legal")}
            </h3>
            <ul className="space-y-2 text-gray-400">
              <li>
                <Link
                  href={getPath("terms")}
                  className="hover:text-blue-400 transition-colors"
                >
                  {t("footer.terms")}
                </Link>
              </li>
              <li>
                <Link
                  href={getPath("privacy")}
                  className="hover:text-blue-400 transition-colors"
                >
                  {t("footer.privacy")}
                </Link>
              </li>
            </ul>
          </div>
        </div>
        <div className="border-t border-gray-800 mt-8 pt-8 text-center text-gray-400">
          <p>{t("footer.copyright")}</p>
        </div>
      </div>
    </footer>
  );
}


----------------------

import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Navbar } from "@/components/Navbar";
import { Footer } from "@/components/Footer";
import { HeroSection } from "@/sections/HeroSection";
import { HowItWorksSection } from "@/sections/HowItWorksSection";
import { AIShowcaseSection } from "@/sections/AIShowcaseSection";
import { GeneratorSection } from "@/sections/GeneratorSection";
import { MythsSection } from "@/sections/MythsSection";

export default function Home() {
  const { t } = useTranslation();

  return (
    <>
      <Helmet>
        <title>{t('site.title')}</title>
        <meta name="description" content={t('hero.subtitle')} />
        <meta property="og:title" content={t('site.title')} />
        <meta property="og:description" content={t('hero.subtitle')} />
      </Helmet>
      
      <div className="min-h-screen bg-background text-foreground">
        <Navbar />
        <main>
          <HeroSection />
          <HowItWorksSection />
          <AIShowcaseSection />
          <GeneratorSection />
          <MythsSection />
        </main>
        <Footer />
      </div>
    </>
  );
}

----------------------
import { useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import { ChevronDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { TypeAnimation } from "react-type-animation";

export function HeroSection() {
  const { t } = useTranslation();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null;

  return (
    <section id="home" className="min-h-screen flex items-center justify-center parallax-bg relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 opacity-20">
        <motion.div 
          className="absolute top-1/4 left-1/4 w-64 h-64 bg-blue-500/20 rounded-full blur-3xl"
          animate={{ 
            y: [0, -20, 0],
            scale: [1, 1.1, 1],
          }}
          transition={{ 
            duration: 6,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
        <motion.div 
          className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl"
          animate={{ 
            y: [0, 20, 0],
            scale: [1, 0.9, 1],
          }}
          transition={{ 
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut",
            delay: 1
          }}
        />
      </div>

      <div className="container mx-auto px-4 text-center relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <h1 className="text-5xl md:text-7xl font-bold mb-6">
            <TypeAnimation
              sequence={[
                'The future is not human-only.',
                2000,
              ]}
              wrapper="span"
              speed={50}
              className="gradient-text typewriter"
              repeat={0}
            />
          </h1>
          
          <motion.p 
            className="text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.3 }}
          >
            {t('hero.subtitle')}
          </motion.p>
          
          <motion.div 
            className="flex flex-col sm:flex-row gap-4 justify-center items-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
          >
            <Button 
              onClick={() => {
                const element = document.querySelector('#generator');
                if (element) {
                  element.scrollIntoView({ behavior: 'smooth' });
                }
              }}
              className="px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold rounded-full transition-all duration-300 transform hover:scale-105 glow-effect"
            >
              {t('hero.cta')}
            </Button>
            <Button 
              variant="outline" 
              onClick={() => {
                const element = document.querySelector('#how-it-works');
                if (element) {
                  element.scrollIntoView({ behavior: 'smooth' });
                }
              }}
              className="px-8 py-4 glass-effect border-blue-400/50 text-gray-800 dark:text-white bg-white/20 dark:bg-transparent font-semibold rounded-full hover:bg-white/30 dark:hover:bg-white/10 transition-all duration-300 transform hover:scale-105"
            >
              {t('hero.learnMore')}
            </Button>
          </motion.div>
        </motion.div>
      </div>

      {/* Scroll indicator */}
      <motion.div 
        className="absolute bottom-8 left-1/2 transform -translate-x-1/2"
        animate={{ y: [0, 10, 0] }}
        transition={{ duration: 2, repeat: Infinity }}
      >
        <ChevronDown className="w-6 h-6 text-blue-400" />
      </motion.div>
    </section>
  );
}

----------------------

import { useTranslation } from "react-i18next";
import { Database, Cpu, Sparkles, ArrowRight } from "lucide-react";
import { motion } from "framer-motion";

export function HowItWorksSection() {
  const { t } = useTranslation();

  const steps = [
    {
      icon: Database,
      key: "step1",
      gradient: "from-blue-500 to-blue-600",
    },
    {
      icon: Cpu,
      key: "step2",
      gradient: "from-purple-500 to-purple-600",
    },
    {
      icon: Sparkles,
      key: "step3",
      gradient: "from-green-500 to-green-600",
    },
  ];

  return (
    <section
      id="how-it-works"
      className="py-20 bg-gray-100 dark:bg-gray-800/50"
      style={{ backgroundColor: "var(--section-bg)" }}
    >
      <div className="container mx-auto px-4">
        <motion.div
          className="text-center mb-16"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <h2 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
            {t("howItWorks.title")}
          </h2>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
            {t("howItWorks.description")}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto">
          {steps.map((step, index) => {
            const Icon = step.icon;
            return (
              <div key={step.key} className="relative">
                <motion.div
                  className="text-center group"
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.2 }}
                  viewport={{ once: true }}
                >
                  <div className="relative mb-6">
                    <motion.div
                      className={`w-20 h-20 bg-gradient-to-r ${step.gradient} rounded-full flex items-center justify-center mx-auto transition-transform`}
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Icon className="w-10 h-10 text-white" />
                    </motion.div>
                  </div>

                  <h3 className="text-2xl font-semibold mb-4 text-gray-600 dark:text-white">
                    {t(`howItWorks.${step.key}.title`)}
                  </h3>

                  <p className="text-gray-600 dark:text-gray-300">
                    {t(`howItWorks.${step.key}.description`)}
                  </p>
                </motion.div>

                {/* Arrow for desktop */}
                {index < steps.length - 1 && (
                  <div className="hidden md:block absolute top-10 left-full w-full h-0.5 bg-gradient-to-r from-blue-500 to-transparent transform translate-x-4">
                    <ArrowRight className="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-2 w-6 h-6 text-blue-500" />
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </section>
  );
}

--------------------

import { useTranslation } from "react-i18next";
import { motion } from "framer-motion";
import { Play, Image, Music, FileText, Sparkles } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState, useEffect } from "react";

function TypewriterEffect({ text }: { text: string }) {
  const [displayedText, setDisplayedText] = useState("");

  useEffect(() => {
    let index = 0;
    const timer = setInterval(() => {
      if (index < text.length) {
        setDisplayedText(text.slice(0, index + 1));
        index++;
      } else {
        clearInterval(timer);
      }
    }, 30);

    return () => clearInterval(timer);
  }, [text]);

  return (
    <div>
      {displayedText}
      <motion.span
        animate={{ opacity: [1, 0] }}
        transition={{ duration: 0.8, repeat: Infinity }}
        className="inline-block"
      >
        |
      </motion.span>
    </div>
  );
}

export function AIShowcaseSection() {
  const { t } = useTranslation();
  const [activeDemo, setActiveDemo] = useState<string | null>(null);

  const handleTryDemo = (type: string) => {
    setActiveDemo(type);
    setTimeout(() => {
      setActiveDemo(null);
    }, 3000);
  };

  const showcaseItems = [
    {
      type: "image",
      icon: Image,
      titleKey: "showcase.image.title",
      descKey: "showcase.image.desc",
      content: (
        <motion.div
          className="relative rounded-lg overflow-hidden"
          animate={activeDemo === "image" ? { scale: [1, 1.02, 1] } : {}}
          transition={{ duration: 0.5 }}
        >
          <div className="w-72 h-96 relative">
            <img
              src="/assets/ai-generated-image.png"
              alt="AI Generated Futuristic Portrait"
              className="w-72 h-96 rounded-lg shadow-lg object-cover"
            />
            {activeDemo === "image" && (
              <motion.div
                className="absolute inset-0 bg-black/60 rounded-lg flex items-center justify-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                <div className="text-center text-white">
                  <motion.div
                    className="text-2xl mb-2"
                    animate={{ rotate: [0, 360] }}
                    transition={{ duration: 1, repeat: Infinity }}
                  >
                    üé®
                  </motion.div>
                  <div className="font-semibold">
                    {t("showcase.image.processingText")}
                  </div>
                  <div className="text-sm opacity-80">
                    {t("showcase.image.processingQuote")}
                  </div>
                  <div className="w-32 bg-white/30 rounded-full h-1 mt-3 mx-auto">
                    <motion.div
                      className="bg-blue-400 h-1 rounded-full"
                      animate={{ width: ["0%", "100%"] }}
                      transition={{ duration: 2.5, ease: "easeOut" }}
                    />
                  </div>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>
      ),
    },
    {
      type: "video",
      icon: Play,
      titleKey: "showcase.video.title",
      descKey: "showcase.video.desc",
      content: (
        <div className="w-72 h-96 rounded-lg shadow-lg relative overflow-hidden">
          <video
            className="w-72 h-96 rounded-lg shadow-lg object-cover"
            controls
            preload="metadata"
          >
            <source src="/assets/ai-generated-video.mp4" type="video/mp4" />
            Twoja przeglƒÖdarka nie obs≈Çuguje elementu video.
          </video>
          {activeDemo === "video" && (
            <motion.div
              className="absolute inset-0 bg-black/60 rounded-lg flex items-center justify-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
            >
              <div className="text-center text-white">
                <motion.div
                  className="text-2xl mb-2"
                  animate={{ rotate: [0, 360] }}
                  transition={{ duration: 1, repeat: Infinity }}
                >
                  üé¨
                </motion.div>
                <div className="font-semibold">
                  {t("showcase.video.processingText")}
                </div>
                <div className="text-sm opacity-80">
                  {t("showcase.video.processingQuote")}
                </div>
                <div className="w-32 bg-white/30 rounded-full h-1 mt-3 mx-auto">
                  <motion.div
                    className="bg-blue-400 h-1 rounded-full"
                    animate={{ width: ["0%", "100%"] }}
                    transition={{ duration: 2.5, ease: "easeOut" }}
                  />
                </div>
              </div>
            </motion.div>
          )}
        </div>
      ),
    },
    {
      type: "music",
      icon: Music,
      titleKey: "showcase.music.title",
      descKey: "showcase.music.desc",
      content: (
        <div className="w-72 h-96 bg-gradient-to-br from-purple-900 via-indigo-800 to-blue-900 rounded-lg shadow-lg flex flex-col items-center justify-center p-4 relative overflow-hidden">
          <div className="w-full mb-4">
            <audio
              controls
              className="w-full h-12 bg-black/20 rounded-lg"
              preload="metadata"
            >
              <source src="/assets/ai-generated-music.mp3" type="audio/mpeg" />
              Twoja przeglƒÖdarka nie obs≈Çuguje elementu audio.
            </audio>
          </div>
          <div className="flex items-end space-x-1 mb-4 h-16">
            {[...Array(24)].map((_, i) => (
              <motion.div
                key={i}
                className="w-1 bg-gradient-to-t from-cyan-400 to-purple-400 rounded-full"
                animate={{
                  height:
                    activeDemo === "music"
                      ? [
                          Math.sin(i * 0.3) * 20 + 25,
                          Math.sin(i * 0.3 + Math.PI / 2) * 25 + 30,
                          Math.sin(i * 0.3 + Math.PI) * 20 + 25,
                          Math.sin(i * 0.3 + (3 * Math.PI) / 2) * 30 + 25,
                        ]
                      : [
                          Math.sin(i * 0.2) * 10 + 15,
                          Math.sin(i * 0.2 + Math.PI / 4) * 15 + 20,
                          Math.sin(i * 0.2 + Math.PI / 2) * 10 + 15,
                        ],
                }}
                transition={{
                  duration: activeDemo === "music" ? 0.4 : 0.8,
                  repeat: Infinity,
                  delay: i * 0.05,
                  ease: "easeInOut",
                }}
              />
            ))}
          </div>
          {activeDemo === "music" &&
            [...Array(4)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute text-white/60 text-lg"
                initial={{ opacity: 0, y: 30 }}
                animate={{
                  opacity: [0, 1, 0],
                  y: [30, -15],
                  x: [Math.random() * 150, Math.random() * 150],
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  delay: i * 0.3,
                }}
              >
                {["‚ô™", "‚ô´", "‚ô¨", "‚ô©"][i]}
              </motion.div>
            ))}
          <div className="text-white/90 text-sm font-medium text-center z-10">
            {activeDemo === "music"
              ? t("showcase.music.processingLabel")
              : t("showcase.music.staticLabel")}
            <div className="text-xs text-white/70 mt-1">
              {activeDemo === "music"
                ? t("showcase.music.processingSublabel")
                : t("showcase.music.staticSublabel")}
            </div>
          </div>
        </div>
      ),
    },
    {
      type: "text",
      icon: FileText,
      titleKey: "showcase.text.title",
      descKey: "showcase.text.desc",
      content: (
        <div className="w-72 h-96 bg-white dark:bg-gray-900 rounded-lg shadow-lg p-4 flex flex-col border border-gray-200 dark:border-gray-700">
          <div className="flex items-center mb-3">
            <FileText className="w-5 h-5 text-blue-600 mr-2" />
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              {activeDemo === "text"
                ? t("showcase.text.processingLabel")
                : t("showcase.text.staticLabel")}
            </span>
          </div>
          <div className="flex-1 overflow-hidden">
            <motion.div className="text-xs leading-relaxed text-gray-700 dark:text-gray-300 h-full">
              {activeDemo === "text" ? (
                <TypewriterEffect text={t("showcase.text.typewriterContent")} />
              ) : (
                <div>
                  <p className="mb-2 font-semibold">
                    {t("showcase.text.staticTitle")}
                  </p>
                  <p className="mb-1">{t("showcase.text.staticContent")}</p>
                  <p className="text-gray-500 dark:text-gray-400 text-xs">
                    {t("showcase.text.staticGeneratedIn")}
                  </p>
                </div>
              )}
            </motion.div>
          </div>
        </div>
      ),
    },
  ];

  return (
    <section
      id="ai-showcase"
      className="py-20 parallax-bg"
      // style={{ background: "var(--section-alt-bg)" }}
    >
      <div className="container mx-auto px-4">
        <motion.div
          className="text-center mb-16"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <h2 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
            {t("showcase.title")}
          </h2>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
            {t("showcase.description")}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-7xl mx-auto">
          {showcaseItems.map((item, index) => {
            const Icon = item.icon;
            return (
              <motion.div
                key={item.type}
                className="glass-effect rounded-xl p-6 text-center group hover:scale-105 transition-all duration-300"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <div className="mb-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Icon className="w-6 h-6 text-white" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2 text-gray-800 dark:text-white">
                    {t(item.titleKey)}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-300 text-sm mb-4">
                    {t(item.descKey)}
                  </p>
                </div>

                <div className="mb-4 flex justify-center min-h-[420px] items-center">
                  <div className="relative">{item.content}</div>
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleTryDemo(item.type)}
                  disabled={activeDemo === item.type}
                  className="glass-effect border-blue-400/50 text-gray-800 dark:text-white bg-white/20 dark:bg-transparent hover:bg-white/30 dark:hover:bg-white/10 disabled:opacity-50"
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  {activeDemo === item.type
                    ? t("showcase.processing")
                    : t("showcase.tryButton")}
                </Button>
              </motion.div>
            );
          })}
        </div>
      </div>
    </section>
  );
}

------------
import { useTranslation } from "react-i18next";
import { InteractiveGenerator } from "@/components/InteractiveGenerator";
import { motion } from "framer-motion";

export function GeneratorSection() {
  const { t } = useTranslation();

  return (
    <section
      id="generator"
      className="py-20 bg-gray-50 dark:bg-gray-900"
      style={{ backgroundColor: "var(--section-alt-bg)" }}
    >
      <div className="container mx-auto px-4">
        <motion.div
          className="text-center mb-16"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <h2 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
            {t("generator.title")}
          </h2>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
            {t("generator.description")}
          </p>
        </motion.div>

        <motion.div
          className="max-w-4xl mx-auto"
          initial={{ opacity: 0, scale: 0.95 }}
          whileInView={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          viewport={{ once: true }}
        >
          <InteractiveGenerator />
        </motion.div>
      </div>
    </section>
  );
}


----------------------------

import { useTranslation } from "react-i18next";
import { MythBusterCard } from "@/components/MythBusterCard";
import { motion } from "framer-motion";

export function MythsSection() {
  const { t } = useTranslation();

  const myths = ["myth1", "myth2", "myth3", "myth4", "myth5", "myth6"];

  return (
    <section
      id="myths"
      className="py-20 parallax-bg dark:bg-gray-800/50"
      // style={{ backgroundColor: "var(--section-bg)" }}
    >
      <div className="container mx-auto px-4">
        <motion.div
          className="text-center mb-16"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <h2 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
            {t("myths.title")}
          </h2>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
            {t("myths.description")}
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl mx-auto">
          {myths.map((mythKey, index) => (
            <MythBusterCard key={mythKey} mythKey={mythKey} index={index} />
          ))}
        </div>
      </div>
    </section>
  );
}


--------------------------

import { useState } from "react";
import { Link, useLocation } from "wouter";
import { useTranslation } from "react-i18next";
import { Menu, X, Zap } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ThemeToggle } from "./ThemeToggle";
import { LanguageSelector } from "./LanguageSelector";

export function Navbar() {
  const { t } = useTranslation();
  const [location] = useLocation();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  const navItems = [
    { key: 'home', href: '/', section: '#home' },
    { key: 'howItWorks', href: '/', section: '#how-it-works' },
    { key: 'showcase', href: '/', section: '#ai-showcase' },
    { key: 'generator', href: '/', section: '#generator' },
    { key: 'myths', href: '/', section: '#myths' },
  ];

  const scrollToSection = (sectionId: string) => {
    if (location !== '/') {
      window.location.href = `/${sectionId}`;
    } else {
      const element = document.querySelector(sectionId);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
      }
    }
    setMobileMenuOpen(false);
  };

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 glass-effect">
      <div className="container mx-auto px-4 py-4">
        <div className="flex items-center justify-between">
          {/* Logo */}
          <Link href="/">
            <div className="flex items-center space-x-2 cursor-pointer">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Zap className="text-white h-5 w-5" />
              </div>
              <span className="text-xl font-bold gradient-text">{t('site.name')}</span>
            </div>
          </Link>
          
          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-6">
            {navItems.map((item) => (
              <button
                key={item.key}
                onClick={() => scrollToSection(item.section)}
                className="hover:text-blue-400 transition-colors duration-200 text-gray-700 dark:text-gray-300 hover:text-primary"
              >
                {t(`nav.${item.key}`)}
              </button>
            ))}
          </div>

          {/* Controls */}
          <div className="flex items-center space-x-4">
            <LanguageSelector />
            <ThemeToggle />
            
            {/* Mobile Menu Button */}
            <Button
              variant="ghost"
              size="icon"
              className="md:hidden glass-effect hover:bg-white/10 dark:hover:bg-white/10"
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            >
              {mobileMenuOpen ? (
                <X className="h-5 w-5" />
              ) : (
                <Menu className="h-5 w-5" />
              )}
            </Button>
          </div>
        </div>

        {/* Mobile Menu */}
        {mobileMenuOpen && (
          <div className="md:hidden mt-4 space-y-2 glass-effect rounded-lg p-4">
            {navItems.map((item) => (
              <button
                key={item.key}
                onClick={() => scrollToSection(item.section)}
                className="block py-2 hover:text-blue-400 transition-colors duration-200 w-full text-left"
              >
                {t(`nav.${item.key}`)}
              </button>
            ))}
          </div>
        )}
      </div>
    </nav>
  );
}


--------------------

import { useState } from "react";
import { useTranslation } from "react-i18next";
import { ChevronDown, Globe } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function LanguageSelector() {
  const { i18n } = useTranslation();
  const [currentLang, setCurrentLang] = useState(i18n.language);

  const changeLanguage = (lng: string) => {
    i18n.changeLanguage(lng);
    setCurrentLang(lng);
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="ghost" 
          size="sm"
          className="glass-effect hover:bg-gray-200/20 dark:hover:bg-white/10 border border-gray-300/30 dark:border-white/20 gap-2"
        >
          <Globe className="h-4 w-4" />
          <span className="text-sm font-medium">
            {currentLang === 'pl' ? 'PL' : 'EN'}
          </span>
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="glass-effect border border-white/20">
        <DropdownMenuItem 
          onClick={() => changeLanguage('pl')}
          className="hover:bg-white/10 dark:hover:bg-white/10"
        >
          üáµüá± Polski
        </DropdownMenuItem>
        <DropdownMenuItem 
          onClick={() => changeLanguage('en')}
          className="hover:bg-white/10 dark:hover:bg-white/10"
        >
          üá¨üáß English
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


----------------------------

import { useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import { ChevronDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { TypeAnimation } from "react-type-animation";

export function HeroSection() {
  const { t } = useTranslation();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null;

  return (
    <section
      id={t("nav.anchors.home")}
      className="min-h-screen flex items-center justify-center parallax-bg relative overflow-hidden"
    >
      <div className="absolute inset-0 opacity-20">
        <motion.div
          className="absolute top-1/4 left-1/4 w-64 h-64 bg-blue-500/20 rounded-full blur-3xl"
          animate={{
            y: [0, -20, 0],
            scale: [1, 1.1, 1],
          }}
          transition={{
            duration: 6,
            repeat: Infinity,
            ease: "easeInOut",
          }}
        />
        <motion.div
          className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl"
          animate={{
            y: [0, 20, 0],
            scale: [1, 0.9, 1],
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut",
            delay: 1,
          }}
        />
      </div>

      <div className="container mx-auto px-4 text-center relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <h1 className="text-5xl md:text-7xl font-bold mb-6">
            <TypeAnimation
              sequence={["The future is not human-only.", 2000]}
              wrapper="span"
              speed={50}
              className="gradient-text typewriter"
              repeat={0}
            />
          </h1>

          <motion.p
            className="text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.3 }}
          >
            {t("hero.subtitle")}
          </motion.p>

          <motion.div
            className="flex flex-col sm:flex-row gap-4 justify-center items-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
          >
            <Button
              onClick={() => {
                const element = document.querySelector(
                  `#${t("nav.anchors.generator")}`
                );
                if (element) {
                  element.scrollIntoView({ behavior: "smooth" });
                }
              }}
              className="px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold rounded-full transition-all duration-300 transform hover:scale-105 glow-effect"
            >
              {t("hero.cta")}
            </Button>
            <Button
              variant="outline"
              onClick={() => {
                const element = document.querySelector(
                  `#${t("nav.anchors.howItWorks")}`
                );
                if (element) {
                  element.scrollIntoView({ behavior: "smooth" });
                }
              }}
              className="px-8 py-4 glass-effect border-blue-400/50 text-foreground bg-background/20 font-semibold rounded-full hover:bg-background/30 transition-all duration-300 transform hover:scale-105"
            >
              {t("hero.learnMore")}
            </Button>
          </motion.div>
        </motion.div>
      </div>

      <motion.div
        className="absolute bottom-8 left-1/2 transform -translate-x-1/2"
        animate={{ y: [0, 10, 0] }}
        transition={{ duration: 2, repeat: Infinity }}
      >
        <ChevronDown className="w-6 h-6 text-blue-400" />
      </motion.div>
    </section>
  );
}


------------------------

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"],
    },
  },
});
